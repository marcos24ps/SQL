/*
drop table clientes;
drop table proveedores;
drop table pedidos;
drop table log_clientes;
*/

CREATE TABLE clientes (
  id_cliente NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR2(50),
  primer_apellido VARCHAR2(50),
  segundo_apellido VARCHAR2(50)
);

CREATE TABLE proveedores (
  id_proveedor NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR2(50),
  direccion VARCHAR2(100),
  telefono VARCHAR2(20)
);

CREATE TABLE pedidos (
  id_pedido NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_cliente NUMBER,
  id_proveedor NUMBER,
  fecha_pedido DATE,
  total NUMBER(10, 2),
  FOREIGN KEY (id_cliente) REFERENCES clientes(id_cliente),
  FOREIGN KEY (id_proveedor) REFERENCES proveedores(id_proveedor)
);

CREATE TABLE log_clientes (
  id_log NUMBER GENERATED ALWAYS AS IDENTITY,
  usuario VARCHAR2(100),
  fecha_insert TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_log_clientes PRIMARY KEY (id_log)
);

CREATE OR REPLACE TRIGGER trg_insert_clientes
AFTER INSERT ON clientes
FOR EACH ROW
BEGIN
  INSERT INTO log_clientes(usuario)
  VALUES (SYS_CONTEXT('USERENV', 'SESSION_USER'));
END;
/

CREATE OR REPLACE PROCEDURE modificar_nombre_cliente(
  p_id_cliente IN NUMBER,
  p_nuevo_nombre IN VARCHAR2
)
AS
BEGIN
  BEGIN
    -- Intentar actualizar el nombre del cliente
    UPDATE clientes
    SET nombre = p_nuevo_nombre
    WHERE id_cliente = p_id_cliente;
    
    -- Verificar si se realizó la actualización
    IF SQL%ROWCOUNT = 0 THEN
      -- Si no se actualizó ninguna fila, lanzar una excepción personalizada
      RAISE_APPLICATION_ERROR(-20001, 'No se encontró ningún cliente con el ID especificado.');
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      -- Capturar cualquier otra excepción y mostrar un mensaje de error personalizado
      DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
  END;
END;
/

BEGIN
  SAVEPOINT inicio_transaccion;
  
  -- Inserción en la tabla de clientes
  INSERT INTO clientes (nombre, primer_apellido, segundo_apellido)
  VALUES('Marcos', 'Pérez', 'Sierra');
  
  -- Actualización de las unidades en la tabla de productos
  UPDATE clientes
  SET nombre = 'Lucas'
  WHERE id = 99;
  
  -- Si no hay errores, confirmar la transacción
  COMMIT;
  
  DBMS_OUTPUT.PUT_LINE('Pedido realizado y unidades actualizadas correctamente.');
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK TO inicio_transaccion;
    DBMS_OUTPUT.PUT_LINE('Error al realizar el pedido: ' || SQLERRM);
END;


INSERT INTO clientes (nombre, primer_apellido, segundo_apellido)
SELECT 'Juan', 'González', 'López' FROM DUAL
UNION ALL
SELECT 'María', 'Rodríguez', 'Martínez' FROM DUAL
UNION ALL
SELECT 'Pedro', 'Sánchez', 'Ramírez' FROM DUAL
UNION ALL
SELECT 'Ana', 'López', 'García' FROM DUAL
UNION ALL
SELECT 'Luis', 'Hernández', 'Pérez' FROM DUAL;

INSERT INTO proveedores (nombre, direccion, telefono)
SELECT 'Proveedor A', 'Calle Principal 123', '123456789' FROM DUAL
UNION ALL
SELECT 'Proveedor B', 'Avenida Central 456', '987654321' FROM DUAL
UNION ALL
SELECT 'Proveedor C', 'Plaza Mayor 789', '654123789' FROM DUAL
UNION ALL
SELECT 'Proveedor D', 'Calle Secundaria 456', '789321654' FROM DUAL
UNION ALL
SELECT 'Proveedor E', 'Avenida Norte 789', '456789123' FROM DUAL;

INSERT INTO pedidos (id_cliente, id_proveedor, fecha_pedido, total)
VALUES (1, 1, TO_DATE('2023-05-27', 'YYYY-MM-DD'), 150.50);

INSERT INTO pedidos (id_cliente, id_proveedor, fecha_pedido, total)
VALUES (2, 3, TO_DATE('2023-05-26', 'YYYY-MM-DD'), 250.75);

INSERT INTO pedidos (id_cliente, id_proveedor, fecha_pedido, total)
VALUES (3, 2, TO_DATE('2023-05-25', 'YYYY-MM-DD'), 180.20);

INSERT INTO pedidos (id_cliente, id_proveedor, fecha_pedido, total)
VALUES (4, 4, TO_DATE('2023-05-24', 'YYYY-MM-DD'), 300.40);

INSERT INTO pedidos (id_cliente, id_proveedor, fecha_pedido, total)
VALUES (5, 5, TO_DATE('2023-05-23', 'YYYY-MM-DD'), 120.90);

